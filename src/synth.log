
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 13.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -Os)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: exe_unit_w47.sv
Parsing SystemVerilog input from `exe_unit_w47.sv' to AST representation.
Generating RTLIL representation for module `\exe_unit_w47'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \exe_unit_w47_rtl

2.2. Analyzing design hierarchy..
Top module:  \exe_unit_w47_rtl
Removing unused module `\exe_unit_w47'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \exe_unit_w47_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \exe_unit_w47_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$exe_unit_w47.sv:0$5 in module exe_unit_w47_rtl.
Marked 26 switch rules as full_case in process $proc$exe_unit_w47.sv:0$5 in module exe_unit_w47_rtl.
Marked 1 switch rules as full_case in process $proc$exe_unit_w47.sv:178$78 in module exe_unit_w47_rtl.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 17 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$80'.
  Set init value: \o_status = 4'0000
  Set init value: \s_result = 4'x
  Set init value: \ERROR = 1'0
  Set init value: \ODD = 1'0
  Set init value: \ZERO = 1'0
  Set init value: \NEG = 1'0

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rsn in `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:178$78'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~26 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
     1/46: $8\ODD[0:0]
     2/46: $7\ODD[0:0]
     3/46: $6\ODD[0:0]
     4/46: $5\ODD[0:0]
     5/46: $4\ODD[0:0]
     6/46: $3\ODD[0:0]
     7/46: $2\ODD[0:0]
     8/46: $1\ODD[0:0]
     9/46: $2\NEG[0:0]
    10/46: $1\NEG[0:0]
    11/46: $2\ZERO[0:0]
    12/46: $1\ZERO[0:0]
    13/46: $14\s_result[3:0]
    14/46: $7\ERROR[0:0]
    15/46: $13\s_result[3:0]
    16/46: $12\s_result[3:0]
    17/46: $6\ERROR[0:0]
    18/46: $1\s_result[3:0] [3]
    19/46: $11\s_result[3:0]
    20/46: $10\s_result[3:0]
    21/46: $4$bitselwrite$data$exe_unit_w47.sv:96$3[3:0]$41
    22/46: $4$bitselwrite$mask$exe_unit_w47.sv:96$2[3:0]$40
    23/46: $4$bitselwrite$sel$exe_unit_w47.sv:96$4[3:0]$42
    24/46: $4\ERROR[0:0]
    25/46: $3$bitselwrite$sel$exe_unit_w47.sv:96$4[3:0]$38
    26/46: $3$bitselwrite$data$exe_unit_w47.sv:96$3[3:0]$37
    27/46: $3$bitselwrite$mask$exe_unit_w47.sv:96$2[3:0]$36
    28/46: $3\ERROR[0:0]
    29/46: $9\s_result[3:0]
    30/46: $2\ERROR[0:0]
    31/46: $8\s_result[3:0]
    32/46: $2$bitselwrite$sel$exe_unit_w47.sv:96$4[3:0]$34
    33/46: $2$bitselwrite$data$exe_unit_w47.sv:96$3[3:0]$33
    34/46: $2$bitselwrite$mask$exe_unit_w47.sv:96$2[3:0]$32
    35/46: $1\s_result[3:0] [2:0]
    36/46: $6\s_result[3:0]
    37/46: $5\s_result[3:0]
    38/46: $4\s_result[3:0]
    39/46: $3\s_result[3:0]
    40/46: $2\s_result[3:0]
    41/46: $5\ERROR[0:0]
    42/46: $7\s_result[3:0]
    43/46: $1$bitselwrite$sel$exe_unit_w47.sv:96$4[3:0]$11
    44/46: $1$bitselwrite$data$exe_unit_w47.sv:96$3[3:0]$10
    45/46: $1$bitselwrite$mask$exe_unit_w47.sv:96$2[3:0]$9
    46/46: $1\ERROR[0:0]
Creating decoders for process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:178$78'.
     1/2: $1\o_status[3:0]
     2/2: $1\o_result[3:0]
Creating decoders for process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$80'.

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\exe_unit_w47_rtl.\s_result' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
No latch inferred for signal `\exe_unit_w47_rtl.\ERROR' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
Removing init bit 1'0 for non-memory siginal `\exe_unit_w47_rtl.\ERROR` in process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5`.
No latch inferred for signal `\exe_unit_w47_rtl.\ODD' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
Removing init bit 1'0 for non-memory siginal `\exe_unit_w47_rtl.\ODD` in process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5`.
No latch inferred for signal `\exe_unit_w47_rtl.\ZERO' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
Removing init bit 1'0 for non-memory siginal `\exe_unit_w47_rtl.\ZERO` in process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5`.
No latch inferred for signal `\exe_unit_w47_rtl.\NEG' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
Removing init bit 1'0 for non-memory siginal `\exe_unit_w47_rtl.\NEG` in process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5`.
No latch inferred for signal `\exe_unit_w47_rtl.\i' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
No latch inferred for signal `\exe_unit_w47_rtl.$bitselwrite$mask$exe_unit_w47.sv:96$2' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
No latch inferred for signal `\exe_unit_w47_rtl.$bitselwrite$data$exe_unit_w47.sv:96$3' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
No latch inferred for signal `\exe_unit_w47_rtl.$bitselwrite$sel$exe_unit_w47.sv:96$4' from process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\exe_unit_w47_rtl.\o_result' using process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:178$78'.
  created $adff cell `$procdff$430' with positive edge clock and negative level reset.
Creating register for signal `\exe_unit_w47_rtl.\o_status' using process `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:178$78'.
  created $adff cell `$procdff$431' with positive edge clock and negative level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 26 empty switches in `\exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
Removing empty process `exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$5'.
Removing empty process `exe_unit_w47_rtl.$proc$exe_unit_w47.sv:178$78'.
Removing empty process `exe_unit_w47_rtl.$proc$exe_unit_w47.sv:0$80'.
Cleaned up 26 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.
<suppressed ~58 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.
<suppressed ~2 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 61 unused cells and 226 unused wires.
<suppressed ~64 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module exe_unit_w47_rtl...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
<suppressed ~99 debug messages>
Removed a total of 33 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w47_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$157: \i_argA -> { 1'0 \i_argA [2:0] }
      Replacing known input bits on port A of cell $procmux$366: \i_argA -> { 1'0 \i_argA [2:0] }
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$116.
    dead port 1/2 on $mux $procmux$124.
    dead port 2/2 on $mux $procmux$130.
    dead port 1/2 on $mux $procmux$133.
    dead port 2/2 on $mux $procmux$136.
    dead port 2/2 on $mux $procmux$138.
    dead port 2/2 on $mux $procmux$144.
    dead port 2/2 on $mux $procmux$146.
    dead port 2/2 on $mux $procmux$152.
    dead port 2/2 on $mux $procmux$154.
    dead port 2/2 on $mux $procmux$159.
    dead port 2/2 on $mux $procmux$164.
    dead port 1/2 on $mux $procmux$177.
    dead port 1/2 on $mux $procmux$179.
    dead port 1/2 on $mux $procmux$182.
    dead port 2/2 on $mux $procmux$184.
    dead port 1/2 on $mux $procmux$191.
    dead port 1/2 on $mux $procmux$194.
    dead port 2/2 on $mux $procmux$196.
    dead port 1/2 on $mux $procmux$239.
    dead port 1/2 on $mux $procmux$242.
    dead port 2/2 on $mux $procmux$244.
    dead port 1/2 on $mux $procmux$275.
    dead port 1/2 on $mux $procmux$278.
    dead port 2/2 on $mux $procmux$280.
    dead port 1/2 on $mux $procmux$284.
    dead port 1/2 on $mux $procmux$287.
    dead port 2/2 on $mux $procmux$289.
    dead port 2/2 on $mux $procmux$295.
    dead port 2/2 on $mux $procmux$301.
    dead port 2/2 on $mux $procmux$332.
    dead port 1/2 on $mux $procmux$335.
    dead port 2/2 on $mux $procmux$337.
    dead port 1/2 on $mux $procmux$345.
    dead port 2/2 on $mux $procmux$347.
    dead port 2/2 on $mux $procmux$356.
    dead port 2/2 on $mux $procmux$358.
    dead port 2/2 on $mux $procmux$360.
    dead port 2/2 on $mux $procmux$368.
    dead port 2/2 on $mux $procmux$370.
    dead port 2/2 on $mux $procmux$377.
    dead port 1/2 on $mux $procmux$385.
    dead port 1/2 on $mux $procmux$387.
    dead port 1/2 on $mux $procmux$390.
    dead port 2/2 on $mux $procmux$392.
    dead port 1/2 on $mux $procmux$401.
    dead port 2/2 on $mux $procmux$403.
    dead port 1/2 on $mux $procmux$406.
    dead port 2/2 on $mux $procmux$408.
    dead port 1/2 on $mux $procmux$100.
    dead port 1/2 on $mux $procmux$108.
    dead port 1/2 on $mux $procmux$84.
    dead port 1/2 on $mux $procmux$92.
Removed 53 multiplexer ports.
<suppressed ~12 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w47_rtl.
    New ctrl vector for $pmux cell $procmux$425: { $auto$opt_reduce.cc:134:opt_pmux$433 $procmux$168_CMP $procmux$139_CMP }
  Optimizing cells in module \exe_unit_w47_rtl.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 0 unused cells and 86 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w47_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w47_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w47_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w47_rtl.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell exe_unit_w47_rtl.$lt$exe_unit_w47.sv:93$39 ($lt).
Removed top 27 bits (of 32) from port A of cell exe_unit_w47_rtl.$neg$exe_unit_w47.sv:0$44 ($neg).
Converting cell exe_unit_w47_rtl.$neg$exe_unit_w47.sv:0$44 ($neg) from signed to unsigned.
Removed top 1 bits (of 5) from port A of cell exe_unit_w47_rtl.$neg$exe_unit_w47.sv:0$44 ($neg).
Removed top 28 bits (of 32) from port Y of cell exe_unit_w47_rtl.$shift$exe_unit_w47.sv:0$48 ($shift).
Removed top 29 bits (of 32) from port B of cell exe_unit_w47_rtl.$ge$exe_unit_w47.sv:98$52 ($ge).
Removed top 31 bits (of 32) from port B of cell exe_unit_w47_rtl.$sub$exe_unit_w47.sv:122$59 ($sub).
Removed top 29 bits (of 32) from port Y of cell exe_unit_w47_rtl.$sub$exe_unit_w47.sv:122$59 ($sub).
Removed top 1 bits (of 4) from port A of cell exe_unit_w47_rtl.$sub$exe_unit_w47.sv:122$59 ($sub).
Removed top 1 bits (of 2) from port B of cell exe_unit_w47_rtl.$procmux$169_CMP0 ($eq).
Removed top 28 bits (of 32) from wire exe_unit_w47_rtl.$shift$exe_unit_w47.sv:0$48_Y.
Removed top 29 bits (of 32) from wire exe_unit_w47_rtl.$sub$exe_unit_w47.sv:122$59_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module exe_unit_w47_rtl:
  creating $macc model for $neg$exe_unit_w47.sv:0$44 ($neg).
  creating $macc model for $sub$exe_unit_w47.sv:122$59 ($sub).
  creating $alu model for $macc $sub$exe_unit_w47.sv:122$59.
  creating $alu model for $macc $neg$exe_unit_w47.sv:0$44.
  creating $alu model for $ge$exe_unit_w47.sv:48$15 ($ge): new $alu
  creating $alu model for $ge$exe_unit_w47.sv:98$52 ($ge): new $alu
  creating $alu model for $lt$exe_unit_w47.sv:63$24 ($lt): merged with $ge$exe_unit_w47.sv:48$15.
  creating $alu model for $lt$exe_unit_w47.sv:93$39 ($lt): merged with $ge$exe_unit_w47.sv:98$52.
  creating $alu cell for $ge$exe_unit_w47.sv:98$52, $lt$exe_unit_w47.sv:93$39: $auto$alumacc.cc:485:replace_alu$438
  creating $alu cell for $ge$exe_unit_w47.sv:48$15, $lt$exe_unit_w47.sv:63$24: $auto$alumacc.cc:485:replace_alu$451
  creating $alu cell for $neg$exe_unit_w47.sv:0$44: $auto$alumacc.cc:485:replace_alu$464
  creating $alu cell for $sub$exe_unit_w47.sv:122$59: $auto$alumacc.cc:485:replace_alu$467
  created 4 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.
<suppressed ~3 debug messages>

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w47_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w47_rtl.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 2 unused cells and 6 unused wires.
<suppressed ~3 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w47_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w47_rtl.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.
<suppressed ~17 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 2 unused cells and 9 unused wires.
<suppressed ~3 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \exe_unit_w47_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \exe_unit_w47_rtl.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod$5fb3cea3e36078ed44b85aadf768a6588af6651e\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$constmap:b6d5011a111b4ca40e652509ef75e544f6e863e2$paramod$7f1320bf706f65f3ab57d088c03383e114ba1a8e\_90_shift_shiftx for cells of type $shift.
Analyzing pattern of constant bits for this cell:
  Constant input on bit 0 of port A: 1'0
Creating constmapped module `$paramod$constmap:9765f9dcdfc0f6ca1c3e550e5cfd8c586a7470af$paramod$7f1320bf706f65f3ab57d088c03383e114ba1a8e\_90_shift_shiftx'.

3.20.14. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:9765f9dcdfc0f6ca1c3e550e5cfd8c586a7470af$paramod$7f1320bf706f65f3ab57d088c03383e114ba1a8e\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$620.
    dead port 2/2 on $mux $procmux$614.
    dead port 2/2 on $mux $procmux$608.
Removed 3 multiplexer ports.
<suppressed ~366 debug messages>

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:9765f9dcdfc0f6ca1c3e550e5cfd8c586a7470af$paramod$7f1320bf706f65f3ab57d088c03383e114ba1a8e\_90_shift_shiftx.
<suppressed ~35 debug messages>
Removed 55 unused cells and 69 unused wires.
Using template $paramod$constmap:9765f9dcdfc0f6ca1c3e550e5cfd8c586a7470af$paramod$7f1320bf706f65f3ab57d088c03383e114ba1a8e\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$1a3a0c35c4a4896fbfd612699525c057298e72d2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~728 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.
<suppressed ~388 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
<suppressed ~225 debug messages>
Removed a total of 75 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 15 unused cells and 386 unused wires.
<suppressed ~16 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\exe_unit_w47_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 186 gates and 197 wires to a netlist network with 10 inputs and 7 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               AND cells:        2
ABC RESULTS:               NOT cells:       10
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               MUX cells:       17
ABC RESULTS:                OR cells:       41
ABC RESULTS:               NOR cells:        8
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:      180
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        7
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module exe_unit_w47_rtl.
<suppressed ~5 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\exe_unit_w47_rtl'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 0 unused cells and 123 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \exe_unit_w47_rtl

3.24.2. Analyzing design hierarchy..
Top module:  \exe_unit_w47_rtl
Removed 0 unused modules.

3.25. Printing statistics.

=== exe_unit_w47_rtl ===

   Number of wires:                130
   Number of wire bits:            177
   Number of public wires:          13
   Number of public wire bits:      60
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                132
     $_ANDNOT_                      32
     $_AND_                          2
     $_DFF_PN0_                      8
     $_MUX_                         17
     $_NAND_                         2
     $_NOR_                          8
     $_NOT_                         10
     $_ORNOT_                        3
     $_OR_                          39
     $_XNOR_                         7
     $_XOR_                          4

3.26. Executing CHECK pass (checking for obvious problems).
Checking module exe_unit_w47_rtl...
Found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\exe_unit_w47_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 124 gates and 134 wires to a netlist network with 10 inputs and 7 outputs.

4.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       22
ABC RESULTS:               AND cells:       50
ABC RESULTS:                OR cells:       50
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:      117
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        7
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \exe_unit_w47_rtl..
Removed 0 unused cells and 134 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.

6.1. Executing BMUXMAP pass.

6.2. Executing DEMUXMAP pass.
Dumping module `\exe_unit_w47_rtl'.

7. Printing statistics.

=== exe_unit_w47_rtl ===

   Number of wires:                133
   Number of wire bits:            180
   Number of public wires:          13
   Number of public wire bits:      60
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                135
     $_AND_                         50
     $_DFF_PN0_                      8
     $_NOT_                         22
     $_OR_                          50
     $_XOR_                          5

   Estimated number of transistors:        704+

End of script. Logfile hash: 7d1dca493d, CPU: user 0.43s system 0.07s, MEM: 28.18 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 13.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -Os)
Time spent: 32% 2x abc (0 sec), 21% 24x opt_expr (0 sec), ...
